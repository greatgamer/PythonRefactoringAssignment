import unittest
import model
import csv_plugin
import python_code_validator as py_cv
import pickle_modules as pm
import controller
import uml_output
import sys

__author__ = "Peter Campbell"
__copyright__ = "Copyright 2018,BCPR301 Class Assignment 1"
__credits__ = []
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "Peter Campbell"
__email__ = "peter@intrepid-adventure.com"
__status__ = "Development"

class MainTests(unittest.TestCase):

    def test_01_true_input(self):
        testclass = csv_plugin.CSV_handler()
        example_type = dict()
        expected = type(example_type)
        actual = type(testclass.open_file('linkedlist.csv'))
        self.assertEqual(expected, actual)

    def test_02_false_input(self):
        testclass = csv_plugin.CSV_handler()
        expected = False
        actual = testclass.open_file('dreaming.csv')
        self.assertEqual(expected, actual, "Expected {} got {}".format(expected, actual))        

    def test_03_compare_output(self):
        # Compares plugin output with output generated by model
        data_for_model = ['linkedlist.py']
        newModelData = model.FileProcessor()
        newModelData.process_files(data_for_model)
        model_data_module = newModelData.get_modules()
        testclass = csv_plugin.CSV_handler()
        expected = testclass.write_csv_file(model_data_module, 'testdatafile02.csv')
        test_module = testclass.open_file('test_data_file01.csv')


    def test_04_compare_csv_with_output_file(self):
        #compares a file already in csv form with a newly generated file based on the original
        import filecmp
        testclass = csv_plugin.CSV_handler()
        input_file = 'linkedlist.csv'
        output_file = 'test_compare_file.csv'
        module = testclass.open_file(input_file)
        testclass.write_csv_file(module , output_file)
        expected = True
        actual = filecmp.cmp(input_file, output_file, True)
        self.assertEqual(expected,actual)

    def test_05_code_validator_true_input(self):
        testclass = py_cv.CodeValidator()
        filename = 'linkedlist.py'
        expected = True
        actual = testclass.validate_file(filename)
        self.assertEqual(expected, actual)

    def test_06_code_validator_false_input(self):
        testclass = py_cv.CodeValidator()
        filename = 'NoSuchPythonFile.py'
        expected = False
        actual = testclass.validate_file(filename)
        self.assertEqual(expected, actual)

    def test_07_code_validator_multiple_correct_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['linkedlist.py','plants.py','csv_plugin.py']
        expected = 3
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)

    def test_08_code_validator_multiple_incorrect_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['linkedlist','plants','csv_plugin']
        expected = 0
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)

    def test_09_code_validator_multiple_mixed_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['linkedlist.py','plants.py','csv_plugin']
        expected = 2
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)

    #Test pickle modules

    def test_10_pickle_save(self):
        pickler = pm.PickleModules()
        data = 12345
        expected = True
        actual = pickler.save(data)
        self.assertEqual(expected, actual)

    def test_11_pickle_load(self):
        pickler = pm.PickleModules()
        expected = 12345
        actual = pickler.load()
        self.assertEqual(expected, actual)

    def test_12_pickle_module(self):
        data_for_model = ['plants.py']
        newModelData = model.FileProcessor()
        newModelData.process_files(data_for_model)
        model_data_module = newModelData.get_modules()
        pickler = pm.PickleModules()
        expected = True
        actual = pickler.save(model_data_module)
        self.assertEqual(expected, actual)

    def test_13_pickle_module(self):
        data_for_model = ['plants.py']
        newModelData = model.FileProcessor()
        newModelData.process_files(data_for_model)
        model_data_module = newModelData.get_modules()
        pickler = pm.PickleModules()
        expected = len(model_data_module)
        actual = len(pickler.load())
        self.assertEqual(expected,actual)

    def test_14_pickle_module(self):
        data_for_model = ['plants.py']
        newModelData = model.FileProcessor()
        newModelData.process_files(data_for_model)
        pickler = pm.PickleModules()
        actual = True
        try:
            expected = TypeError
            test = pickler.save()
        except TypeError:
            actual = TypeError
        self.assertEqual(expected, actual)

    def test_15_controller_runparser(self):
        cont = controller.Controller()
        expected = dict
        actual = type(cont.run_parser(['plants.py']))
        self.assertEqual(expected, actual)

    def test_16_controller_runparser(self):
        cont = controller.Controller()
        expected = dict
        actual = type(cont.run_parser(['plants.py', 'linkedlist.py']))
        self.assertEqual(expected, actual)

    def test_17_controller_create_uml(self):
        cont = controller.Controller()
        expected = True
        actual = cont.create_class_diagram(['plants.py'])
        self.assertEqual(expected, actual)

    def test_18_controller_create_uml(self):
        cont = controller.Controller()
        expected = True
        actual = cont.create_class_diagram(['plants.py', 'linkedlist.py'])
        self.assertEqual(expected, actual)

    def test_19_controller_create_uml(self):
        # Pass non python file to generate an image.
        # Result should lead to empty image being generated.
        # Return should be True
        cont = controller.Controller()
        expected = True
        actual = cont.create_class_diagram(['plants.csv'])
        self.assertEqual(expected, actual)

    def test_20_code_validator_false_input(self):
        testclass = py_cv.CodeValidator()
        filename = 'plants.csv'
        expected = False
        actual = testclass.validate_file(filename)
        self.assertEqual(expected, actual)

    def test_21_controller_create_csv(self):
        cont = controller.Controller()
        filename = 'plants.py'
        expected = True
        actual = cont.create_csv(filename, 'test_output_plants.csv')
        self.assertEqual(expected, actual)

    def test_21_controller_create_csv(self):
        # Fails test due to insufficient feedback in the Model
        cont = controller.Controller()
        filename = 'doesnotexist.py'
        expected = False
        actual = cont.create_csv(filename, 'test_output_plants.csv')
        self.assertEqual(expected, actual)

    def test_22_controller_load_csv_for_uml(self):
        cont = controller.Controller()
        expected = False
        actual = cont.load_csv_for_uml('plants.py')
        self.assertEqual(expected, actual)

    def test_23_controller_load_csv_for_uml(self):
        cont = controller.Controller()
        expected = True
        actual = cont.load_csv_for_uml('plants.csv')
        self.assertEqual(expected, actual)

    def test_24_controller_validate_code(self):
        cont = controller.Controller()
        expected = 1
        actual = len(cont.validate_code(['linkedlist.py']))
        self.assertEqual(expected, actual)

    def test_25_controller_validate_code(self):
        cont = controller.Controller()
        expected = 2
        actual = len(cont.validate_code(['linkedlist.py','plants.py']))
        self.assertEqual(expected, actual)

    def test_26_controller_validate_code(self):
        cont = controller.Controller()
        expected = 1
        actual = len(cont.validate_code(['linkedlist.py','plants.foo']))
        self.assertEqual(expected, actual)

    def test_27_controller_pickle(self):
        cont = controller.Controller()
        expected = True
        actual =  cont.pickle_modules()
        self.assertEqual(expected, actual)

    def test_28_controller_pickle(self):
        cont = controller.Controller()
        expected = True
        actual = cont.pickle_modules('linkedlist.py')
        self.assertEqual(expected, actual)

    def test_29_controller_pickle(self):
        # actual returns True even though it is unable to load a csv
        # this is a problem with the feedback provided in the model
        cont = controller.Controller()
        expected = False
        actual = cont.pickle_modules('linkedlist.csv')
        self.assertEqual(expected, actual)



if __name__ == '__main__':
    
    unittest.main(verbosity=2)
